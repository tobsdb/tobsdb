{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome to the TobsDB documentation! What is TobsDB? TobsDB is a database engine and management system built from scratch in Golang. Why TobsDB? You may be wondering what advantages TobsDB has over other database options... ...Well I'm wondering about that too. If you find out let me know ;). One thing I like about TobsDB is the built-in schema support. No connections without schemas(or existing schemas) means you can be sure your data has the right shape. I like to think TobsDB is super speedy. But I guess no other way to find out than to test in prod Help wanted with the docs. Please reach out if you're willing to help, thank you.","title":"Introduction"},{"location":"#introduction","text":"Welcome to the TobsDB documentation!","title":"Introduction"},{"location":"#what-is-tobsdb","text":"TobsDB is a database engine and management system built from scratch in Golang.","title":"What is TobsDB?"},{"location":"#why-tobsdb","text":"You may be wondering what advantages TobsDB has over other database options... ...Well I'm wondering about that too. If you find out let me know ;). One thing I like about TobsDB is the built-in schema support. No connections without schemas(or existing schemas) means you can be sure your data has the right shape. I like to think TobsDB is super speedy. But I guess no other way to find out than to test in prod Help wanted with the docs. Please reach out if you're willing to help, thank you.","title":"Why TobsDB?"},{"location":"actions/","text":"Actions Actions are instructions a client can send to a server to perform specific operations or get specific data. All TDB actions are written in camelCase . Note: This document is not yet complete. Sending Requests An action request is sent with the action field set to the desired action name: { \"action\": \"action_name\" ... } Each action request has a set of fields that are specific to the action. Responses All action responses have the following fields: status : (int) the status code of the response. message : (string) a description of the response. This will contain the error message if the request failed. data : (any) the data returned by the action. Is null in some cases. (e.g. errors, data-less actions etc) __tdb_client_req_id__ : (int) the id of the client request. Row Actions create Make a new row in a table. Required fields: table : the name of the table in the db. data : the data to insert. The data field cannot be contain the primary key field, and must contain all non-optional fields. Example Request: { \"action\": \"create\", \"table\": \"table_name\", \"data\": {...} } Example Response: { \"status\": 201, \"message\": \"Created new row in table table_name\", \"data\": {...} } createMany Make new rows in a table. Required fields: table : the name of the table in the db. data : an array of data to insert. The individual objects in the data field must follow the same rules as in the create action. Example Request: { \"action\": \"create\", \"table\": \"table_name\", \"data\": [{...}, {...}, ...] } Example Response: { \"status\": 201, \"message\": \"Created 10 new rows in table table_name\", \"data\": [{...}, {...}, ...] } findUnique Find a row in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. The where field in a findUnique request must contain at least one unique field. If no unique fields are found (or the table doesn't have any unique fields), an error will be returned. Example Request: { \"action\": \"findUnique\", \"table\": \"table_name\", \"where\": {...} } Example Response: { \"status\": 200, \"message\": \"Found row in table table_name\", \"data\": {...} } findMany Find rows in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. orderBy : (\"asc\" or \"desc\") manipulate the order of the results. take : (int) the maximum number of rows to return. skip : (int) the number of rows to skip from the results. cursor : a cursor to use for pagination. Has a similar shape to the where field. The where field in a findMany request can contain any, all, or none of the fields in the table. In the case where no fields are used in the where clause, all rows in the table will be returned. The where and cursor field in a findMany request also support dynamic queries . Example Request: { \"action\": \"findMany\", \"table\": \"table_name\", \"where\": {...} } Example Response: { \"status\": 200, \"message\": \"Found 10 rows in table table_name\", \"data\": [{...}, {...}, ...] } deleteUnique Delete a row in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. The where field in a deleteUnique request must contain at least one unique field. Example Request: { \"action\": \"deleteUnique\", \"table\": \"table_name\", \"where\": {...} } Example Response: { \"status\": 200, \"message\": \"Deleted row in table table_name\", \"data\": {...} } deleteMany Delete rows in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. The where field in a deleteMany request can contain any, all, or none of the fields in the table. In the case where no fields are used in the where clause, all rows in the table are deleted. It also supports dynamic queries . Example Request: { \"action\": \"deleteMany\", \"table\": \"table_name\", \"where\": {...} } Example Response: { \"status\": 200, \"message\": \"Deleted 10 rows in table table_name\", \"data\": [{...}, {...}, ...] } updateUnique Update a row in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. data : the data to use to update the row. The data field in updateUnique requests supports dynamic queries Example Request: { \"action\": \"updateUnique\", \"table\": \"table_name\", \"where\": {...}, \"data\": {...}, } Example Response: { \"status\": 200, \"message\": \"Updated row in table table_name\", \"data\": {...} } updateMany Update rows in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. data : the data to use to update the row. The where and data fields in updateMany requests support dynamic queries Example Request: { \"action\": \"updateMany\", \"table\": \"table_name\", \"where\": {...}, \"data\": {...}, } Example Response: { \"status\": 200, \"message\": \"Updated row in table table_name\", \"data\": [{...}, {...}, ...] }","title":"Actions"},{"location":"actions/#actions","text":"Actions are instructions a client can send to a server to perform specific operations or get specific data. All TDB actions are written in camelCase . Note: This document is not yet complete.","title":"Actions"},{"location":"actions/#sending-requests","text":"An action request is sent with the action field set to the desired action name: { \"action\": \"action_name\" ... } Each action request has a set of fields that are specific to the action.","title":"Sending Requests"},{"location":"actions/#responses","text":"All action responses have the following fields: status : (int) the status code of the response. message : (string) a description of the response. This will contain the error message if the request failed. data : (any) the data returned by the action. Is null in some cases. (e.g. errors, data-less actions etc) __tdb_client_req_id__ : (int) the id of the client request.","title":"Responses"},{"location":"actions/#row-actions","text":"","title":"Row Actions"},{"location":"actions/#create","text":"Make a new row in a table. Required fields: table : the name of the table in the db. data : the data to insert. The data field cannot be contain the primary key field, and must contain all non-optional fields. Example Request: { \"action\": \"create\", \"table\": \"table_name\", \"data\": {...} } Example Response: { \"status\": 201, \"message\": \"Created new row in table table_name\", \"data\": {...} }","title":"create"},{"location":"actions/#createmany","text":"Make new rows in a table. Required fields: table : the name of the table in the db. data : an array of data to insert. The individual objects in the data field must follow the same rules as in the create action. Example Request: { \"action\": \"create\", \"table\": \"table_name\", \"data\": [{...}, {...}, ...] } Example Response: { \"status\": 201, \"message\": \"Created 10 new rows in table table_name\", \"data\": [{...}, {...}, ...] }","title":"createMany"},{"location":"actions/#findunique","text":"Find a row in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. The where field in a findUnique request must contain at least one unique field. If no unique fields are found (or the table doesn't have any unique fields), an error will be returned. Example Request: { \"action\": \"findUnique\", \"table\": \"table_name\", \"where\": {...} } Example Response: { \"status\": 200, \"message\": \"Found row in table table_name\", \"data\": {...} }","title":"findUnique"},{"location":"actions/#findmany","text":"Find rows in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. orderBy : (\"asc\" or \"desc\") manipulate the order of the results. take : (int) the maximum number of rows to return. skip : (int) the number of rows to skip from the results. cursor : a cursor to use for pagination. Has a similar shape to the where field. The where field in a findMany request can contain any, all, or none of the fields in the table. In the case where no fields are used in the where clause, all rows in the table will be returned. The where and cursor field in a findMany request also support dynamic queries . Example Request: { \"action\": \"findMany\", \"table\": \"table_name\", \"where\": {...} } Example Response: { \"status\": 200, \"message\": \"Found 10 rows in table table_name\", \"data\": [{...}, {...}, ...] }","title":"findMany"},{"location":"actions/#deleteunique","text":"Delete a row in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. The where field in a deleteUnique request must contain at least one unique field. Example Request: { \"action\": \"deleteUnique\", \"table\": \"table_name\", \"where\": {...} } Example Response: { \"status\": 200, \"message\": \"Deleted row in table table_name\", \"data\": {...} }","title":"deleteUnique"},{"location":"actions/#deletemany","text":"Delete rows in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. The where field in a deleteMany request can contain any, all, or none of the fields in the table. In the case where no fields are used in the where clause, all rows in the table are deleted. It also supports dynamic queries . Example Request: { \"action\": \"deleteMany\", \"table\": \"table_name\", \"where\": {...} } Example Response: { \"status\": 200, \"message\": \"Deleted 10 rows in table table_name\", \"data\": [{...}, {...}, ...] }","title":"deleteMany"},{"location":"actions/#updateunique","text":"Update a row in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. data : the data to use to update the row. The data field in updateUnique requests supports dynamic queries Example Request: { \"action\": \"updateUnique\", \"table\": \"table_name\", \"where\": {...}, \"data\": {...}, } Example Response: { \"status\": 200, \"message\": \"Updated row in table table_name\", \"data\": {...} }","title":"updateUnique"},{"location":"actions/#updatemany","text":"Update rows in a table. Required fields: table : the name of the table in the db. where : the where clause for the query. data : the data to use to update the row. The where and data fields in updateMany requests support dynamic queries Example Request: { \"action\": \"updateMany\", \"table\": \"table_name\", \"where\": {...}, \"data\": {...}, } Example Response: { \"status\": 200, \"message\": \"Updated row in table table_name\", \"data\": [{...}, {...}, ...] }","title":"updateMany"},{"location":"dynamic-queries/","text":"Dynamic Queries This page is being written.","title":"Dynamic Queries"},{"location":"dynamic-queries/#dynamic-queries","text":"This page is being written.","title":"Dynamic Queries"},{"location":"getting-started/","text":"Getting Started Installation There's a few ways to install TobsDB. 1. go install $ go install github.com/tobsdb/tobsdb/cmd/tdb@latest 2. Github Releases (Recommended) Navigate to the releases page and download the latest release. 3. Docker $ docker pull tobani/tobsdb Configuration Command line flags -v : print the version and exit. -db=<path> : the path to the db.tdb file (if the file does not exits the first write will create it). If the value is relative then it is resolved from the current working directory. -m : when used or set to true, the database data remains in memory and is not written a file when the program exits. Defaults to false. -port=<port> : the listening port. Defaults to 7085 (tobs in leet-speak :D) -log : optionally print logs. Defaults to false -dbg : optionally print extra logs. Defaults to false -u : set the root username. Defaults to ENV.TDB_USER -p : set the root password. Defaults to ENV.TDB_PASS -w : set the time to wait(in ms) before writing db data to file. Defaults to 1000ms Environment variables TDB_USER : set the root username. TDB_PASS : set the root password.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#installation","text":"There's a few ways to install TobsDB.","title":"Installation"},{"location":"getting-started/#1-go-install","text":"$ go install github.com/tobsdb/tobsdb/cmd/tdb@latest","title":"1. go install"},{"location":"getting-started/#2-github-releases-recommended","text":"Navigate to the releases page and download the latest release.","title":"2. Github Releases (Recommended)"},{"location":"getting-started/#3-docker","text":"$ docker pull tobani/tobsdb","title":"3. Docker"},{"location":"getting-started/#configuration","text":"","title":"Configuration"},{"location":"getting-started/#command-line-flags","text":"-v : print the version and exit. -db=<path> : the path to the db.tdb file (if the file does not exits the first write will create it). If the value is relative then it is resolved from the current working directory. -m : when used or set to true, the database data remains in memory and is not written a file when the program exits. Defaults to false. -port=<port> : the listening port. Defaults to 7085 (tobs in leet-speak :D) -log : optionally print logs. Defaults to false -dbg : optionally print extra logs. Defaults to false -u : set the root username. Defaults to ENV.TDB_USER -p : set the root password. Defaults to ENV.TDB_PASS -w : set the time to wait(in ms) before writing db data to file. Defaults to 1000ms","title":"Command line flags"},{"location":"getting-started/#environment-variables","text":"TDB_USER : set the root username. TDB_PASS : set the root password.","title":"Environment variables"},{"location":"schema/","text":"The schema is the backbone of TobsDB. It defines the structure of a database and is required when creating a new database. Schema.tdb schema.tdb (the schema file) is where the type declarations for tables and fields in a TobsDB database go. The schema.tdb file lives client side and is sent to the TobsDB server on the initial database creation request. Types TobsDB has a few built-in types which are accepted in the schema.tdb file: Int String Vector Float Date Bool Bytes Declaration Syntax Tables In the schema.tdb file, only one type of top level declaration can be found. Which is the $TABLE declaration. $TABLE is used to start the declaration for a new table, and is used in the following way: $TABLE <table_name> { ... } where <table_name> is the name you want to give to the table being declared. There's a few rules for declaring a new table aside from starting with $TABLE : the opening brace, { , must always be on the same line as the $TABLE <table_name> declaration. the closing braces, } , must always be on a line after the $TABLE <table_name> declaration. all fields belonging to a table must be declared between the opening and closing braces - on a line of their own. Fields Fields are properties that exist on a $TABLE . The syntax for declaring a field is simple: <field_name> <data_type> <...properties?> That is, start with the field's name, then its type (which must be a TobsDB type ), then lastly and optionally any extra field properties. It is important to exhaustively declare all fields on a table because fields not declared will never be used, even if they are sent in a query. Comments Comments are allowed in the schema.tdb file but must always be on a line of their own and start with double forward slash ( // ). Example $TABLE user { id Int key(primary) name String unique(true) DOB Date optional(true) best_friend Int relation(user.id) // store the user's favorite games favorite_games Vector vector(String) }","title":"Schema.tdb"},{"location":"schema/#schematdb","text":"schema.tdb (the schema file) is where the type declarations for tables and fields in a TobsDB database go. The schema.tdb file lives client side and is sent to the TobsDB server on the initial database creation request.","title":"Schema.tdb"},{"location":"schema/#types","text":"TobsDB has a few built-in types which are accepted in the schema.tdb file: Int String Vector Float Date Bool Bytes","title":"Types"},{"location":"schema/#declaration-syntax","text":"","title":"Declaration Syntax"},{"location":"schema/#tables","text":"In the schema.tdb file, only one type of top level declaration can be found. Which is the $TABLE declaration. $TABLE is used to start the declaration for a new table, and is used in the following way: $TABLE <table_name> { ... } where <table_name> is the name you want to give to the table being declared. There's a few rules for declaring a new table aside from starting with $TABLE : the opening brace, { , must always be on the same line as the $TABLE <table_name> declaration. the closing braces, } , must always be on a line after the $TABLE <table_name> declaration. all fields belonging to a table must be declared between the opening and closing braces - on a line of their own.","title":"Tables"},{"location":"schema/#fields","text":"Fields are properties that exist on a $TABLE . The syntax for declaring a field is simple: <field_name> <data_type> <...properties?> That is, start with the field's name, then its type (which must be a TobsDB type ), then lastly and optionally any extra field properties. It is important to exhaustively declare all fields on a table because fields not declared will never be used, even if they are sent in a query.","title":"Fields"},{"location":"schema/#comments","text":"Comments are allowed in the schema.tdb file but must always be on a line of their own and start with double forward slash ( // ).","title":"Comments"},{"location":"schema/#example","text":"$TABLE user { id Int key(primary) name String unique(true) DOB Date optional(true) best_friend Int relation(user.id) // store the user's favorite games favorite_games Vector vector(String) }","title":"Example"},{"location":"tdb-generate/","text":"TDB Generate This page is being written.","title":"TDB-Generate"},{"location":"tdb-generate/#tdb-generate","text":"This page is being written.","title":"TDB Generate"},{"location":"clients/js/","text":"NodeJS Client The official TobsDB nodejs client is available here . Installation pnpm add tobsdb Or if you're feeling funky and using npm or yarn npm|yarn install tobsdb API documentation class TobsDB constructor<Schema>(connectionInfo: TobsDBConnectionInfo, options: Partial<TobsDBOptions>): TobsDB<Schema> Create a new TobsDB client instance. Parameters: connectionInfo : connection info host : host of the TDB server port : port of the TDB server db : name of the database to connect to schema_path : path to the schema.tdb file username : username to use in connection password : password to use in connection options : client options log : enable logging. Defaults to false debug : enable debug-logging. Defaults to false Type Parameters: Schema : gives type inference for all database query function parameters and return types. The type should correspond to the types in your schema.tdb file. See tdb-generate async connect(): Promise<void> Connect to the TobsDB server at the specified host and port. async disconnect(): Promise<void> Gracefully disconnect from TobsDB server. async create(table: string, data: object): TDBResponse Send a create request to the TobsDB server. Parameters: table : the name of the table to create a row in. Must correspond to the name of a table in the schema.tdb file. data : data to use in the create request. async createMany(table: string, data: object): TDBResponse Send a create-many request to the TobsDB server. Parameters: table : the name of the table to create rows in. Must correspond to the name of a table in the schema.tdb file. data : an array data to use in the create-many request. async findUnique(table: string, where: object): TDBResponse Send a findUnique request to the TobsDB server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In findUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema. async findMany(table: string, where: object): TDBResponse Send a findMany request to the TobsDB server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. async updateUnique(table: string, where: object, data: object): TDBResponse Send an updateUnique request to the TobsDB server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In updateUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema. data : data to use in the update request. async updateMany(table: string, where: object, data: object): TDBResponse Send an updateMany request to the TobsDB server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. data : data to use in the update request. async deleteUnique(table: string, where: object): TDBResponse Send a deleteUnique request to the TobsDB server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In deleteUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema. async deleteMany(table: string, where: object): TDBResponse Send a deleteMany request to the TobsDB server. Parameters: table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for.","title":"JavaScript/Typescript"},{"location":"clients/js/#nodejs-client","text":"The official TobsDB nodejs client is available here .","title":"NodeJS Client"},{"location":"clients/js/#installation","text":"pnpm add tobsdb Or if you're feeling funky and using npm or yarn npm|yarn install tobsdb","title":"Installation"},{"location":"clients/js/#api-documentation","text":"","title":"API documentation"},{"location":"clients/js/#class-tobsdb","text":"","title":"class TobsDB"},{"location":"clients/js/#constructorschemaconnectioninfo-tobsdbconnectioninfo-options-partialtobsdboptions-tobsdbschema","text":"Create a new TobsDB client instance.","title":"constructor&lt;Schema&gt;(connectionInfo: TobsDBConnectionInfo, options: Partial&lt;TobsDBOptions&gt;): TobsDB&lt;Schema&gt;"},{"location":"clients/js/#parameters","text":"connectionInfo : connection info host : host of the TDB server port : port of the TDB server db : name of the database to connect to schema_path : path to the schema.tdb file username : username to use in connection password : password to use in connection options : client options log : enable logging. Defaults to false debug : enable debug-logging. Defaults to false","title":"Parameters:"},{"location":"clients/js/#type-parameters","text":"Schema : gives type inference for all database query function parameters and return types. The type should correspond to the types in your schema.tdb file. See tdb-generate","title":"Type Parameters:"},{"location":"clients/js/#async-connect-promisevoid","text":"Connect to the TobsDB server at the specified host and port.","title":"async connect(): Promise&lt;void&gt;"},{"location":"clients/js/#async-disconnect-promisevoid","text":"Gracefully disconnect from TobsDB server.","title":"async disconnect(): Promise&lt;void&gt;"},{"location":"clients/js/#async-createtable-string-data-object-tdbresponse","text":"Send a create request to the TobsDB server.","title":"async create(table: string, data: object): TDBResponse"},{"location":"clients/js/#parameters_1","text":"table : the name of the table to create a row in. Must correspond to the name of a table in the schema.tdb file. data : data to use in the create request.","title":"Parameters:"},{"location":"clients/js/#async-createmanytable-string-data-object-tdbresponse","text":"Send a create-many request to the TobsDB server.","title":"async createMany(table: string, data: object): TDBResponse"},{"location":"clients/js/#parameters_2","text":"table : the name of the table to create rows in. Must correspond to the name of a table in the schema.tdb file. data : an array data to use in the create-many request.","title":"Parameters:"},{"location":"clients/js/#async-finduniquetable-string-where-object-tdbresponse","text":"Send a findUnique request to the TobsDB server.","title":"async findUnique(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_3","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In findUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema.","title":"Parameters:"},{"location":"clients/js/#async-findmanytable-string-where-object-tdbresponse","text":"Send a findMany request to the TobsDB server.","title":"async findMany(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_4","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for.","title":"Parameters:"},{"location":"clients/js/#async-updateuniquetable-string-where-object-data-object-tdbresponse","text":"Send an updateUnique request to the TobsDB server.","title":"async updateUnique(table: string, where: object, data: object): TDBResponse"},{"location":"clients/js/#parameters_5","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In updateUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema. data : data to use in the update request.","title":"Parameters:"},{"location":"clients/js/#async-updatemanytable-string-where-object-data-object-tdbresponse","text":"Send an updateMany request to the TobsDB server.","title":"async updateMany(table: string, where: object, data: object): TDBResponse"},{"location":"clients/js/#parameters_6","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. data : data to use in the update request.","title":"Parameters:"},{"location":"clients/js/#async-deleteuniquetable-string-where-object-tdbresponse","text":"Send a deleteUnique request to the TobsDB server.","title":"async deleteUnique(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_7","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for. In deleteUnique requests, the only used keys are keys that correspond to unique or primary-key fields in the schema.","title":"Parameters:"},{"location":"clients/js/#async-deletemanytable-string-where-object-tdbresponse","text":"Send a deleteMany request to the TobsDB server.","title":"async deleteMany(table: string, where: object): TDBResponse"},{"location":"clients/js/#parameters_8","text":"table : the name of the table to search in. Must correspond to the name of a table in the schema.tdb file. where : an object containing key-value pairs to look for.","title":"Parameters:"},{"location":"clients/overview/","text":"Client Overview TobsDB has official clients for the following languages: JavaScript/Typescript Rust Golang Making a TobsDB client. A TDB client is a program that: connects to a TobsDB server via a TCP socket. sends requests to the TobsDB servers through the connected socket as json encoded data. processes data sent from the server. Connecting: After the initial TCP connection request, the next request sent to the server must be the TDB connect request. db : (string?) the name of the database to use on the TobsDB server (the database will be created if it did not previously exist) schema : (string?) The contents of a valid schema.tdb file. username : (string) The username to use when connecting to the server. password : (string) The password to use when connecting to the server. checkOnly : (bool?) Validate the schema and close connection. Actions: The client interacts with the TDB server using actions. An action is an instruction to the server to perform an operation. You can read more about TobsDB actions here","title":"Overview"},{"location":"clients/overview/#client-overview","text":"TobsDB has official clients for the following languages: JavaScript/Typescript Rust Golang","title":"Client Overview"},{"location":"clients/overview/#making-a-tobsdb-client","text":"A TDB client is a program that: connects to a TobsDB server via a TCP socket. sends requests to the TobsDB servers through the connected socket as json encoded data. processes data sent from the server.","title":"Making a TobsDB client."},{"location":"clients/overview/#connecting","text":"After the initial TCP connection request, the next request sent to the server must be the TDB connect request. db : (string?) the name of the database to use on the TobsDB server (the database will be created if it did not previously exist) schema : (string?) The contents of a valid schema.tdb file. username : (string) The username to use when connecting to the server. password : (string) The password to use when connecting to the server. checkOnly : (bool?) Validate the schema and close connection.","title":"Connecting:"},{"location":"clients/overview/#actions","text":"The client interacts with the TDB server using actions. An action is an instruction to the server to perform an operation. You can read more about TobsDB actions here","title":"Actions:"}]}